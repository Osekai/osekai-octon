@using System.Drawing
@using Osekai.Octon.Drawing
@using Osekai.Octon.WebServer
@using Osekai.Octon.WebServer.Helpers
@using Osekai.Octon.WebServer.Extensions
@using Osekai.Octon.WebServer.Pages.Partials
@model Osekai.Octon.WebServer.Pages.AppBaseLayout

@{
    Layout = "BaseLayout";
    
    Color color = Model.AccentOvveride?.Color ?? Model.CurrentReadOnlyAppTheme!.Color;
    Color darkColor = Model.AccentOvveride?.DarkColor ?? Model.CurrentReadOnlyAppTheme!.DarkColor;

    Hsl colorHsl = color.ToHsl();
    Hsl darkColorHsl = darkColor.ToHsl();
}
 
@section HeadExtension 
{
    <link rel="stylesheet" href="@StringWithVersionQueryHtmlContent.Create($"/static/{Model.CurrentApp.SimpleName}/css/main.css")" />
    @if (Model.CurrentApp.Experimental) {<link rel="stylesheet" href="@StringWithVersionQueryHtmlContent.Create($"/static/shared/css/experimental/main.css")" />}
    <style>
    html{
        --accentdark: @($"{darkColor.R},{darkColor.G},{darkColor.B}");
        --accent: @($"{color.R},{color.G},{color.B}");
        --accentdark_hue: @(darkColorHsl.H)deg;
        --accent_hue: @(colorHsl.H)deg;
        --accentdark_saturation: @(darkColorHsl.S)%;
        --accent_saturation: @(colorHsl.S)%;
        --accentdark_value: @(darkColorHsl.L)%;
        --accent_value: @(colorHsl.L)%;
        --accentdark_valueoffset: @(Model.CurrentReadOnlyAppTheme!.DarkHslValueMultiplier);
        --accent_valueoffset: @(Model.CurrentReadOnlyAppTheme!.HslValueMultiplier);
    }
    </style>
    <style id="custom_theme_container"></style>
    <script>    
        const christmas = "0";
        const medals = @(Json.Serialize(Model.AppBaseLayoutMedals));
        const nAppId = "@Model.CurrentApp.Id";
        const version = "@Constants.Version";
        const nUserID = @(Model.CurrentOsuUser?.Id ?? -1);
        const nUsername = "@(Model.CurrentOsuUser?.Username ?? "guest")";
        const nRights = 2;
        const userGroups = @(Json.Serialize(Model.AppBaseLayoutUserGroups));
        const currentlyApp = "@(Model.CurrentApp.SimpleName)";
        const apps = @(Json.Serialize(Model.AppBaseLayoutApps));
        const locales = @(Json.Serialize(Model.AppBaseLayoutLocales));
        const sourcesNames = ["groups","report","apps","badges","comments","faq","general","home","medals","navbar","profiles","rankings","snapshots","donate","contact","misc/translators","misc/groups","misc/global"];
        const currentLocale = "@(Model.CurrentLocale.LanguageCode)";
    </script>
    
    @if (IsSectionDefined("AppHeadExtension"))
    {
        @await RenderSectionAsync("AppHeadExtension")
    }
}

<body>
    @if (Model.ShowNavbar)
    {
        @await Html.PartialAsync("Partials/Navbar", 
            new NavbarPartial(Model.CurrentLocale.Localizator, Model.CurrentApp, Model.Apps, Model.AppBaseLayoutApps, Model.CurrentOsuUser))
    }
</body>

@RenderBody()