@using System.Drawing
@using Osekai.Octon.WebServer.Helpers
@using Osekai.Octon.WebServer.Drawing
@using Osekai.Octon.WebServer.Extensions
@model Osekai.Octon.WebServer.Pages.AppBaseLayout

@{
    Layout = "BaseLayout";
}
 
@section HeadExtension {
    <link rel="stylesheet" href="@StringWithVersionQueryHtmlContent.Create($"/static/{Model.App.SimpleName}/css/main.css")" />
    @if (Model.App.Experimental) {<link rel="stylesheet" href="@StringWithVersionQueryHtmlContent.Create($"/static/shared/css/experimental/main.css")" />}
    
    @{
        Color color = Model.AccentOvveride?.Color ?? Model.App.AppTheme!.Color;
        Color darkColor = Model.AccentOvveride?.DarkColor ?? Model.App.AppTheme!.DarkColor;

        Hsl colorHsl = color.ToHsl();
        Hsl darkColorHsl = darkColor.ToHsl();
    }
    <style>
    html{
        --accentdark: @($"{darkColor.R},{darkColor.G},{darkColor.B}");
        --accent: @($"{color.R},{color.G},{color.B}");
        --accentdark_hue: @(darkColorHsl.H)deg;
        --accent_hue: @(colorHsl.H)deg;
        --accentdark_saturation: @(darkColorHsl.S)%;
        --accent_saturation: @(colorHsl.S)%;
        --accentdark_value: @(darkColorHsl.L)%;
        --accent_value: @(colorHsl.L)%;
        --accentdark_valueoffset: @(Model.App.AppTheme!.DarkHslValueMultiplier);
        --accent_valueoffset: @(Model.App.AppTheme!.HslValueMultiplier);
    }
    </style>
    <style id="custom_theme_container"></style>
    <script>
        const medals = @(Json.Serialize(Model.Medals));
    </script>
}

@RenderBody()